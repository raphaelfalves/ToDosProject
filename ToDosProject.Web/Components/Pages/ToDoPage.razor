@page "/todos"

@layout MainLayout

@inject ApiServiceClient apiService

<PageTitle>Tarefas</PageTitle>

<style>
    .todo {
        padding: 0.5rem;
        background: #2a2a2a;
        border-radius: 4px;
    }

    .container {
        margin-bottom: 20px;
    }

    .todo-container {
        padding-top: 40px;
        padding-bottom: 85px;   
        height: 100%;
    }

    .todo-title {
        text-align: left;
        background: #2a2a2a;
    }

        .todo-title input {
            text-align: left;
            background: #2a2a2a;
            color: #d1d1d1;
        }

    .todo-delete {
        width: 30px;
    }

    .createtodo {
        position: fixed;
        bottom: 0px;
        height: 90px;
        background: linear-gradient(to top, black, #121212, transparent);
        width: 100%;
    }


    input#input-createtodo {
        position: fixed;
        bottom: 40px;
        left: 50%;
        transform: translateX(-50%);
        width: 90%;
        background: #2a2a2a;
        padding: 10px;
        color: #d1d1d1;
    }

    @@media (max-width: 576px) {
        .container {
            width: 90%;
        }
    }

    @@media (min-width: 576px) {
        input#input-createtodo {
            max-width: 540px;
        }

        @@media (min-width: 768px) {
            input#input-createtodo {
                max-width: 720px;
            }
        }

        @@media (min-width: 992px) {
            input#input-createtodo {
                max-width: 960px;
            }
        }

        @@media (min-width: 1200px) {
            input#input-createtodo {
                max-width: 1140px;
            }

            @@media (min-width: 1400px) {
                input#input-createtodo {
                    max-width: 1320px;
                }
            }
        }
    }
</style>

<div class="todo-container">
    @if (toDos == null)
    {
        <p id="p-loading"><em>Loading...</em></p>
    }
    else
    {
        @foreach (var toDo in toDos)
        {
            <div class="container" id="@($"tr-{Array.IndexOf(toDos,toDo)}")">
                <div class="row todo justify-space-between">
                    <div class="col-1">
                        <InputCheckbox Value="toDo.IsConcluded" ValueExpression="() => toDo.IsConcluded" @onclick="() => IsConcludedChange(toDo)" Color="Color.Primary" id="@($"input-isconcluded-{Array.IndexOf(toDos,toDo)}")" />
                    </div>
                    <div class="col-9 todo-title">
                        <InputText Value="@toDo.Title" ValueExpression="() => toDo.Title" ValueChanged="async (e) => await Update(e,toDo)" id="@($"input-title-{Array.IndexOf(toDos,toDo)}")" />
                    </div>
                    <div class="todo-delete">
                        <button @onclick="() => DeleteAsync(toDo.Id)" id="@($"input-delete-{Array.IndexOf(toDos,toDo)}")"><i class="bi bi-trash"></i></button>
                    </div>
                </div>
            </div>
        }

        <div class="createtodo">
            <InputText id="input-createtodo" @bind-Value="newToDoTitle" @onkeyup="SubmitAsync" placeholder="Adicionar tarefa" />
        </div>
    }
</div>

@code {
    public ToDo[]? toDos;

    private string newToDoTitle = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        toDos = await apiService.GetToDosAsync();
    }

    async Task SubmitAsync(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            ToDo? newToDo = new(0, newToDoTitle);

            newToDo = await apiService.CreateToDosAsync(newToDo);

            if (newToDo is not null)
            {
                toDos = [.. toDos, newToDo];
                newToDoTitle = string.Empty;
            }
        }
    }

    async Task DeleteAsync(int id)
    {
        if (await apiService.DeleteToDoAsync(id))
            toDos = toDos?.Where(x => x.Id != id).ToArray();
    }

    async Task Update(string newTitle, ToDo toDo)
    {
        ToDo toDoUpdate = toDo;
        toDoUpdate.Title = newTitle;

        if (await apiService.UpdateToDoAsync(toDoUpdate))
        {
            toDo = toDoUpdate;
        }
    }

    async Task IsConcludedChange(ToDo toDo)
    {
        if (toDo.IsConcluded)
        {
            if (await apiService.UnconcludeToDoAsync(toDo.Id))
                toDo.Unconclude();

            return;
        }

        if (await apiService.ConcludeToDoAsync(toDo.Id))
            toDo.Conclude();
    }
}
